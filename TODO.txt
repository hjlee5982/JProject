● 피킹 구현
 └ (中)콜라이더 구현(박스,캡슐,스피어)
 └ 충돌관리는 어떻게 할것인가?

[2024.10.18 21:02]
 └ 콜라이더랑 레이랑 캐스팅을 하지 말고, 콜라이더는 정말 게임 내부에서 충돌판정이나 트리거 용으로 사용하고
 └ (완료) Picking 컴포넌트를 따로 만들어서 에디터에서 피킹만 가능하게 짜는게 나을듯

● Shader
 └ (O) ID3DX11Effect 말고 직접 관리하기
 └ (O) fx 말고 hlsl로, vs, ps 분리
 └ (O) Material 구조 재정리
 └ Struct.hlsli에 VS_IN을 통합으로 사용할건데, 안에 인자를 바꾸면 VertexData.h에 struct랑 안맞아서 화면이 안그려짐
    똑같이 맞춰도 값이 안들어가면 안그려짐, 확인한번 해봐야함

● GameObject
 └ GameObjectManager 삭제, Scene에서 루프통제, Scene이 GameObjects을 들고있게
   └ [24.09.24, 22:51]그냥 GameObjectManager가 관리하는게 나을 것 같음 
 └ 파생 GameObject클래스들 삭제, GameObject에 Script를 부착해서 컨트롤 하는 방식으로

● Rendering
 └ (中) 기본 쉐이딩으로 PBR 구현
 └ 환경매핑

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● 짜잘한거
 └ sView, sProj 카메라에서 말고 적합한 곳에서 관리하기
 └ (O) SkyBox MeshRenderer에 쉐이더로직 바꿔놓은거 정리하기
 └ (O) ImGui 뒤 클라이언트에도 화면 그려지고 있음
 └ (O) 로그에 const char*말고 다른것도 들어가게 바꾸기


● Scene
 └ Scene 저장, 불러오기


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● Editor
 └ 파일탐색기에서 드래그 앤 드랍으로 로딩이나 생성
 └ 머티리얼 에디터
 └ ImGizmo 적용
 └ 오브젝트 Child 계층구조


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● 기능구현
 └ 파티클
 └ 카툰렌더링
 


[24.09.17 22:43]
└ VS,PS 직접 컴파일하고 ResourceManager에 등록까지 완료
└ 현재 MeshRenderer는 기존 Shader에서 PushOOOData로 쉐이더에 바인딩중임
└ 다 갈아엎고 직접 바인딩하는 로직 작성

[24.09.19 00:36]
└ ShaderEx에서 상수버퍼 직접 바인딩 하는 로직

[24.09.19 23:46]
└ ShaderEx에서 상수버퍼 직접 바인딩 하는 로직(완성, SkyBox MeshRenderer쪽에)

[24.09.21 01:42]
└ 쉐이더 정리중

[24.09.24 22:50]
└ fx에서 hlsl로 바꿈, MeshRenderer 정리완료

[24.09.26 18:27]
└ GameObject 컴포넌트 템플릿으로 불러오게 변경

[24.09.26 21:36]
└ Shader 상수버퍼 바인딩 하는 부분 템플릿으로 변경 

[24.10.01 23:16]
└ Client 창에도 그림그려지는거 고침

[24.10.02 23:33]
└ 로그에 다른 자료형도 넣을 수 있게 바꿈

[24.10.06 22:27]
└ 박스콜라이더 화면에 일단 그림

[24.10.10 18:15]
└ OBB 레이케스팅 추가함

[24.10.29 21:01]
└ Picking용 콜라이더 따로 분리

[24.11.19 17:56]
└ Sphere콜라이더 유니티처럼 바꿈

[24.11.20 17:21]
└ Box 콜라이더 유니티처럼 바꿈

[24.12.17 17:38]
└ 외곽선 띄움

[24.12.18 00:35]
└ 박스 노말 정상화

[25.01.03 17:55]
└ 텍스쳐 입힘
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
메모
1. ViewPort, RTV, DSV 설정
== RenderBegin에서 해주는 중



2. InputLayout 설정 ==> 매 틱마다 안해줘도 되는거 같음
== 버텍스 쉐이더 단계에서 쉐이더 컴파일 후 인풋레이아웃 생성
CONTEXT->IASetPrimitiveTopology(_shaderEx->GetTopology());



3. Primitive Topology 설정
== 쉐이더에 InputLayout 설정해주는곳에서 해줬음



4. Shader 설정
CONTEXT->VSSetShader(_shaderEx->GetVertexShader().Get(), nullptr, 0);
CONTEXT->PSSetShader(_shaderEx2->GetPixelShader().Get(),  nullptr, 0);



5. TransformData 바인딩
TRANSFORM_DATA data;
{
	data.gWorldMatrix = GetOwner()->GetTransform()->GetWorld();
	data.gViewMatrix  = Camera::SView;
	data.gProjMatrix  = Camera::SProj;
}
_shaderEx->BindTransformData(data);



6. Texture 바인딩
// 기존 로직은 Material에 저장된 여러 맵들을 쉐이더에 바인딩 하는 구조
// 필요한거
//  ㄴ 텍스쳐의 SRV
auto srv = _material->GetCubeMap()->GetSRV();
CONTEXT->PSSetShaderResources(8, 1, srv.GetAddressOf());



7. Sampler 바인딩 ( Optional )
//D3D11_SAMPLER_DESC desc;
//ZeroMemory(&desc, sizeof(desc));
//{
//	desc.Filter   = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
//	desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;
//	desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;
//	desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;
//}
//ComPtr<ID3D11SamplerState> samplerState;
//DEVICE->CreateSamplerState(&desc, samplerState.GetAddressOf());
//CONTEXT->PSSetSamplers(0, 1, samplerState.GetAddressOf());



8. Vertex, IndexBuffer 설정
// mesh를 만들고 CreateOOO를 해주면 GeometryHelper에서 vertex, index를 설정해주고 
// VertexBuffer, IndexBuffer를 만들어줌
_mesh->GetVertexBuffer()->PushData(); // CONTEXT->IASetVertexBuffer();
_mesh->GetIndexBuffer()->PushData();  // CONTEXT->IASetIndexBuffer();



9. 그리기 호출
CONTEXT->DrawIndexed(_mesh->GetIndexBuffer()->GetCount(), 0, 0);





JProject 구조

 - 기본 3D 모델들을 그리는 순서
	1. AssetManager에서 클라이언트가 시작될 때 Mesh 인스턴스를 생성함
	2. Mesh 클래스가 Geometry와 VertexBuffer, IndexBuffer를 가지고 있음, 지정한 Geometry를 생성
	3. GeometryHelper 클래스에서 Vertex와 Index를 정의해주고 있음

 - 기본 오브젝트를 생성하는 순서
	1. SceneManager에서 GameObjectManager를 통해 AddGameObject를 해줌
	2. GameObjectManager는 GameObject를 생성하고 이름, 기본 컴포넌트(트랜스폼, 피킹, 스크립트)를 달아준 후 지정한 레이어와 본인에게 저장

