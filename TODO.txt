
● Shader
 └ (O) ID3DX11Effect 말고 직접 관리하기
 └ (O) fx 말고 hlsl로, vs, ps 분리
 └ (中) Material 구조 재정리

● GameObject
 └ GameObjectManager 삭제, Scene에서 루프통제, Scene이 GameObjects을 들고있게
   └ [24.09.24, 22:51]그냥 GameObjectManager가 관리하는게 나을 것 같음 
 └ 파생 GameObject클래스들 삭제, GameObject에 Script를 부착해서 컨트롤 하는 방식으로

● Rendering
 └ 기본 쉐이딩으로 PBR 구현
 └ 환경매핑

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● 짜잘한거
 └ sView, sProj 카메라에서 말고 적합한 곳에서 관리하기
 └ SkyBox MeshRenderer에 쉐이더로직 바꿔놓은거 정리하기


● Scene
 └ Scene 저장, 불러오기


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● Editor
 └ 파일탐색기에서 드래그 앤 드랍으로 로딩이나 생성
 └ 피킹 구현
 └ 머티리얼 에디터
 └ ImGizmo 적용
 └ 오브젝트 Child 계층구조


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● 기능구현
 └ 파티클
 └ 카툰렌더링
 


[24.09.17 22:43]
└ VS,PS 직접 컴파일하고 ResourceManager에 등록까지 완료
└ 현재 MeshRenderer는 기존 Shader에서 PushOOOData로 쉐이더에 바인딩중임
└ 다 갈아엎고 직접 바인딩하는 로직 작성

[24.09.19 00:36]
└ ShaderEx에서 상수버퍼 직접 바인딩 하는 로직

[24.09.19 23:46]
└ ShaderEx에서 상수버퍼 직접 바인딩 하는 로직(완성, SkyBox MeshRenderer쪽에)

[24.09.21 01:42]
└ 쉐이더 정리중

[24.09.24 22:50]
└ fx에서 hlsl로 바꿈, MeshRenderer 정리완료
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
메모
1. ViewPort, RTV, DSV 설정
== RenderBegin에서 해주는 중



2. InputLayout 설정 ==> 매 틱마다 안해줘도 되는거 같음
== 버텍스 쉐이더 단계에서 쉐이더 컴파일 후 인풋레이아웃 생성
CONTEXT->IASetPrimitiveTopology(_shaderEx->GetTopology());



3. Primitive Topology 설정
== 쉐이더에 InputLayout 설정해주는곳에서 해줬음



4. Shader 설정
CONTEXT->VSSetShader(_shaderEx->GetVertexShader().Get(), nullptr, 0);
CONTEXT->PSSetShader(_shaderEx2->GetPixelShader().Get(),  nullptr, 0);



5. TransformData 바인딩
TRANSFORM_DATA data;
{
	data.gWorldMatrix = GetOwner()->GetTransform()->GetWorld();
	data.gViewMatrix  = Camera::SView;
	data.gProjMatrix  = Camera::SProj;
}
_shaderEx->BindTransformData(data);



6. Texture 바인딩
// 기존 로직은 Material에 저장된 여러 맵들을 쉐이더에 바인딩 하는 구조
// 필요한거
//  ㄴ 텍스쳐의 SRV
auto srv = _material->GetCubeMap()->GetSRV();
CONTEXT->PSSetShaderResources(8, 1, srv.GetAddressOf());



7. Sampler 바인딩 ( Optional )
//D3D11_SAMPLER_DESC desc;
//ZeroMemory(&desc, sizeof(desc));
//{
//	desc.Filter   = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
//	desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;
//	desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;
//	desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;
//}
//ComPtr<ID3D11SamplerState> samplerState;
//DEVICE->CreateSamplerState(&desc, samplerState.GetAddressOf());
//CONTEXT->PSSetSamplers(0, 1, samplerState.GetAddressOf());



8. Vertex, IndexBuffer 설정
// mesh를 만들고 CreateOOO를 해주면 GeometryHelper에서 vertex, index를 설정해주고 
// VertexBuffer, IndexBuffer를 만들어줌
_mesh->GetVertexBuffer()->PushData(); // CONTEXT->IASetVertexBuffer();
_mesh->GetIndexBuffer()->PushData();  // CONTEXT->IASetIndexBuffer();



9. 그리기 호출
CONTEXT->DrawIndexed(_mesh->GetIndexBuffer()->GetCount(), 0, 0);